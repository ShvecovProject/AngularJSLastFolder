/**
 * Created by Evgeniy on 12/6/2015.
 */
var HelloWorldCtrl = function($scope){
    $scope.name = 'World';

    $scope.getName = function(){
      return $scope.name;
    };
};

var WorldCtrl = function($scope) {
    $scope.population = 7900;
    $scope.countries = [
        {name: "France", population: 63.1},
        {name: 'United Kingdom', population: 61.8}
    ];
    $scope.worldsPercentage = function(countryPopulation){
      return (countryPopulation/$scope.population)*100;
    };
};
/*
обьект $scope - служит для передачи предметной модели представлению, шаблону.
Присваивая значения свойствам экземпляров контекста(scope), можно передавать
новые значения для отображения в шаблоне.
Обьекты контекста могут снабжаться не только данными но и функциональными особенностями
характерными для данного представления.  То есть в экземпляре контекста можно передать
шаблону некоторую логику для данного пользовательского интерфейса, определив функцию.

Обьекты Scope - позволяют точно определить какая часть предметной модели и какие операции
будут доступны уровню представления. Концептуально обьекты контекста напоминают ViewModel
из шаблона MVVM

Контроллер
Основное предназначение контроллера - инициализация обьектов контекста.
* Инициализация значений в модели
* расширение обьекта $scope дополнительными функциональностями
Контроллеры - обычные функции js.
Устанавливая начальные значения модели, контроллер выполняет ту же работу что и деректива ng-init
Применение контроллеров позволяет выразить логику инициализации на языке js, не загромаждая шаблоны HTML

Модель - это обычные обьекты js.

Контексты - каждый обьект $scope является экземпляром класса Scope. Класс Scope имеет методы управления
жизненным циклом контекста, средства обработки событий и поддержку процедуры отображения шаблона.

Иерархия контекстов

контекст создаеться дерективой ng-controller, вызовом метода $scope.$new().
AngularJs имеет понятие корневого контекста($rootScope) родительского для всех остальных контекстов
Экземпляр $rootScope создается в момент инициализации нового приложения.

Деректива ng-controller - является директив, создающих контексты.AngularJS создает новые экземпляры класса $scope
всякий раз когда встречает в дереве DOM соответствующие дерективы.

Вновь созданный коонтекст ссылается на родительский контекст посредством свойства $parent

Свойства определяемые в одном контексте, доступны всем дочерним контекстам, при условии что дочерний контекст не определяет свойство с тем же именем
Механизм наследования контекстов в AngularJs подчиняется тем же правилам что и наследование прототипов в jS

Angular JS позволяет распространять именованные события с данными через иерархию контекстов.
Событие может возбуждатся в любом контексте и передаваться либо снизу вверх ($emit) либо сверху вниз
($broadcast)

$scope.$broadcast('down')//именованное событие
$scope.$emit('up')
Базовые службы Angular используют такие шины для передачи сигналов о важных изменениях в состоянии приложения.
Пример
$scope.$on('$locationChsangeSuccess', function(event, newUrl, oldUrl)){

}
Метод $on доступен во всех экземплярах контекстов и может применяться для регистрации обработчиков событий.
Функция действующая как обработчик события получит объект события в первом аргуенте. Последующие аргументы могут использоваться для передачи
дополнительных даннвых, зависящих от типа события.
Как и в обработке Dom событий можно вызвать метод preventDefault или stopPropagation объекта события.
Метод stopPropagation() прерывает дальнейшее всплытие события по дереву иерархии контекстов и доступен только для событий
распространяюшихся снизу вверх $emit


Жизненный цикл контекстов
Контекст необходимы бля организации изолированных пространст имен и исключения конфликтов имен переменных.
Небоольшие контексты организованные в иерархии помогают экономить память. Когда какой-либо контекст становиться не нужным
его можно удалить, в результате модельи и функциональность связанная с этим контекстом будет удалена.

Обычно контексты создаются и уничтожаются дерективами создающими контексты. Однако контексты можно также создавать и удалять
вручную.  $new() $destroy()   in $scope
 */